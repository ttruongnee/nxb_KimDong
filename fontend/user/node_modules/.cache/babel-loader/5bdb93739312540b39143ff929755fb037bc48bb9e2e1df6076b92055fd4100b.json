{"ast":null,"code":"function updateCartCount(cartCountRefPC, cartCountRefMobile) {\n  // 1. Lấy dữ liệu giỏ hàng từ Local Storage:\n  //    - `localStorage.getItem('GioHang')` cố gắng lấy một chuỗi JSON đã lưu\n  //      trước đó với khóa 'GioHang'. Đây là nơi bạn lưu thông tin về giỏ hàng.\n  //    - `JSON.parse(...)` chuyển đổi chuỗi JSON lấy được thành một đối tượng JavaScript.\n  //      Đối tượng này có thể chứa thông tin về các sản phẩm trong giỏ hàng và số lượng của chúng.\n  //    - `|| {}` Nếu không tìm thấy dữ liệu 'GioHang' trong Local Storage (ví dụ, giỏ hàng\n  //      trống hoặc người dùng mới truy cập), thì nó sẽ gán một đối tượng JavaScript rỗng `{}`\n  //      cho biến `GioHang`. Điều này tránh gây ra lỗi khi cố gắng xử lý một giá trị `null`.\n  const GioHang = JSON.parse(localStorage.getItem('GioHang')) || {};\n\n  // 2. Tính tổng số lượng sản phẩm trong giỏ hàng:\n  //    - `Object.values(GioHang)` lấy tất cả các giá trị (thường là thông tin chi tiết\n  //      của từng sản phẩm trong giỏ hàng) từ đối tượng `GioHang` và trả về một mảng.\n  //    - `.reduce((acc, item) => acc + (item.SoLuongTruyen || 0), 0)` duyệt qua mảng này.\n  //      - `acc` (accumulator): Biến tích lũy, ban đầu được đặt là `0`. Nó lưu trữ tổng\n  //        số lượng tính đến thời điểm hiện tại trong quá trình duyệt.\n  //      - `item`: Đại diện cho thông tin của một sản phẩm trong giỏ hàng trong mỗi lần duyệt.\n  //      - `item.SoLuongTruyen || 0`: Truy cập thuộc tính `SoLuongTruyen` (số lượng) của\n  //        sản phẩm. Nếu thuộc tính này không tồn tại hoặc có giá trị `null` hoặc `undefined`,\n  //        nó sẽ sử dụng giá trị mặc định là `0` để tránh lỗi.\n  //      - `acc + (item.SoLuongTruyen || 0)`: Cộng số lượng của sản phẩm hiện tại vào biến\n  //        tích lũy `acc`.\n  //    - Kết quả cuối cùng của `reduce` là `totalQuantity`, tổng số lượng tất cả các sản phẩm\n  //      trong giỏ hàng.\n  const totalQuantity = Object.values(GioHang).reduce((acc, item) => acc + (item.SoLuongTruyen || 0), 0);\n\n  // 3. Xác định số lượng hiển thị:\n  //    - `totalQuantity < 10 ? totalQuantity : \"9+\"`: Kiểm tra nếu tổng số lượng nhỏ hơn 10.\n  //      - Nếu đúng (`true`), thì giá trị hiển thị (`displayCount`) sẽ là chính `totalQuantity`.\n  //      - Nếu sai (`false`), (tức là tổng số lượng là 10 trở lên), thì `displayCount` sẽ là chuỗi \"9+\".\n  //      Đây là một cách phổ biến để hiển thị số lượng lớn trong giỏ hàng mà không chiếm quá nhiều không gian.\n  const displayCount = totalQuantity < 10 ? totalQuantity : \"9+\";\n\n  // 4. Cập nhật số lượng hiển thị trên giao diện (cho phiên bản PC/Tablet):\n  //    - `if (cartCountRefPC && cartCountRefPC.current)`: Kiểm tra xem `cartCountRefPC` có tồn tại\n  //      và thuộc tính `current` của nó (thường là một tham chiếu đến một phần tử DOM) có tồn tại hay không.\n  //      `cartCountRefPC` được giả định là một React ref được tạo trong component Header\n  //      và được truyền vào hàm này.\n  //    - `cartCountRefPC.current.textContent = displayCount;`: Nếu tham chiếu hợp lệ, nó sẽ\n  //      thiết lập thuộc tính `textContent` (nội dung văn bản) của phần tử DOM mà `ref` này\n  //      trỏ tới thành giá trị của `displayCount`. Điều này sẽ hiển thị số lượng giỏ hàng\n  //      mới trên giao diện người dùng (thường là một con số nhỏ hoặc \"9+\" trên biểu tượng giỏ hàng).\n  if (cartCountRefPC && cartCountRefPC.current) {\n    cartCountRefPC.current.textContent = displayCount;\n  }\n\n  // 5. Cập nhật số lượng hiển thị trên giao diện (cho phiên bản Mobile):\n  //    - Tương tự như bước 4, nhưng dành cho tham chiếu `cartCountRefMobile`, được giả định\n  //      là ref trỏ đến phần tử hiển thị số lượng giỏ hàng trên giao diện mobile.\n  if (cartCountRefMobile && cartCountRefMobile.current) {\n    cartCountRefMobile.current.textContent = displayCount;\n  }\n}\nexport default updateCartCount;","map":{"version":3,"names":["updateCartCount","cartCountRefPC","cartCountRefMobile","GioHang","JSON","parse","localStorage","getItem","totalQuantity","Object","values","reduce","acc","item","SoLuongTruyen","displayCount","current","textContent"],"sources":["D:/nxb_KimDong/fontend/user/src/component/updateCartCount.js"],"sourcesContent":["function updateCartCount(cartCountRefPC, cartCountRefMobile) {\r\n    // 1. Lấy dữ liệu giỏ hàng từ Local Storage:\r\n    //    - `localStorage.getItem('GioHang')` cố gắng lấy một chuỗi JSON đã lưu\r\n    //      trước đó với khóa 'GioHang'. Đây là nơi bạn lưu thông tin về giỏ hàng.\r\n    //    - `JSON.parse(...)` chuyển đổi chuỗi JSON lấy được thành một đối tượng JavaScript.\r\n    //      Đối tượng này có thể chứa thông tin về các sản phẩm trong giỏ hàng và số lượng của chúng.\r\n    //    - `|| {}` Nếu không tìm thấy dữ liệu 'GioHang' trong Local Storage (ví dụ, giỏ hàng\r\n    //      trống hoặc người dùng mới truy cập), thì nó sẽ gán một đối tượng JavaScript rỗng `{}`\r\n    //      cho biến `GioHang`. Điều này tránh gây ra lỗi khi cố gắng xử lý một giá trị `null`.\r\n    const GioHang = JSON.parse(localStorage.getItem('GioHang')) || {};\r\n\r\n    // 2. Tính tổng số lượng sản phẩm trong giỏ hàng:\r\n    //    - `Object.values(GioHang)` lấy tất cả các giá trị (thường là thông tin chi tiết\r\n    //      của từng sản phẩm trong giỏ hàng) từ đối tượng `GioHang` và trả về một mảng.\r\n    //    - `.reduce((acc, item) => acc + (item.SoLuongTruyen || 0), 0)` duyệt qua mảng này.\r\n    //      - `acc` (accumulator): Biến tích lũy, ban đầu được đặt là `0`. Nó lưu trữ tổng\r\n    //        số lượng tính đến thời điểm hiện tại trong quá trình duyệt.\r\n    //      - `item`: Đại diện cho thông tin của một sản phẩm trong giỏ hàng trong mỗi lần duyệt.\r\n    //      - `item.SoLuongTruyen || 0`: Truy cập thuộc tính `SoLuongTruyen` (số lượng) của\r\n    //        sản phẩm. Nếu thuộc tính này không tồn tại hoặc có giá trị `null` hoặc `undefined`,\r\n    //        nó sẽ sử dụng giá trị mặc định là `0` để tránh lỗi.\r\n    //      - `acc + (item.SoLuongTruyen || 0)`: Cộng số lượng của sản phẩm hiện tại vào biến\r\n    //        tích lũy `acc`.\r\n    //    - Kết quả cuối cùng của `reduce` là `totalQuantity`, tổng số lượng tất cả các sản phẩm\r\n    //      trong giỏ hàng.\r\n    const totalQuantity = Object.values(GioHang).reduce((acc, item) => acc + (item.SoLuongTruyen || 0), 0);\r\n\r\n    // 3. Xác định số lượng hiển thị:\r\n    //    - `totalQuantity < 10 ? totalQuantity : \"9+\"`: Kiểm tra nếu tổng số lượng nhỏ hơn 10.\r\n    //      - Nếu đúng (`true`), thì giá trị hiển thị (`displayCount`) sẽ là chính `totalQuantity`.\r\n    //      - Nếu sai (`false`), (tức là tổng số lượng là 10 trở lên), thì `displayCount` sẽ là chuỗi \"9+\".\r\n    //      Đây là một cách phổ biến để hiển thị số lượng lớn trong giỏ hàng mà không chiếm quá nhiều không gian.\r\n    const displayCount = totalQuantity < 10 ? totalQuantity : \"9+\";\r\n\r\n    // 4. Cập nhật số lượng hiển thị trên giao diện (cho phiên bản PC/Tablet):\r\n    //    - `if (cartCountRefPC && cartCountRefPC.current)`: Kiểm tra xem `cartCountRefPC` có tồn tại\r\n    //      và thuộc tính `current` của nó (thường là một tham chiếu đến một phần tử DOM) có tồn tại hay không.\r\n    //      `cartCountRefPC` được giả định là một React ref được tạo trong component Header\r\n    //      và được truyền vào hàm này.\r\n    //    - `cartCountRefPC.current.textContent = displayCount;`: Nếu tham chiếu hợp lệ, nó sẽ\r\n    //      thiết lập thuộc tính `textContent` (nội dung văn bản) của phần tử DOM mà `ref` này\r\n    //      trỏ tới thành giá trị của `displayCount`. Điều này sẽ hiển thị số lượng giỏ hàng\r\n    //      mới trên giao diện người dùng (thường là một con số nhỏ hoặc \"9+\" trên biểu tượng giỏ hàng).\r\n    if (cartCountRefPC && cartCountRefPC.current) {\r\n        cartCountRefPC.current.textContent = displayCount;\r\n    }\r\n\r\n    // 5. Cập nhật số lượng hiển thị trên giao diện (cho phiên bản Mobile):\r\n    //    - Tương tự như bước 4, nhưng dành cho tham chiếu `cartCountRefMobile`, được giả định\r\n    //      là ref trỏ đến phần tử hiển thị số lượng giỏ hàng trên giao diện mobile.\r\n    if (cartCountRefMobile && cartCountRefMobile.current) {\r\n        cartCountRefMobile.current.textContent = displayCount;\r\n    }\r\n}\r\n\r\nexport default updateCartCount;"],"mappings":"AAAA,SAASA,eAAeA,CAACC,cAAc,EAAEC,kBAAkB,EAAE;EACzD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;;EAEjE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,MAAM,CAACP,OAAO,CAAC,CAACQ,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,IAAIC,IAAI,CAACC,aAAa,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;;EAEtG;EACA;EACA;EACA;EACA;EACA,MAAMC,YAAY,GAAGP,aAAa,GAAG,EAAE,GAAGA,aAAa,GAAG,IAAI;;EAE9D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIP,cAAc,IAAIA,cAAc,CAACe,OAAO,EAAE;IAC1Cf,cAAc,CAACe,OAAO,CAACC,WAAW,GAAGF,YAAY;EACrD;;EAEA;EACA;EACA;EACA,IAAIb,kBAAkB,IAAIA,kBAAkB,CAACc,OAAO,EAAE;IAClDd,kBAAkB,CAACc,OAAO,CAACC,WAAW,GAAGF,YAAY;EACzD;AACJ;AAEA,eAAef,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}