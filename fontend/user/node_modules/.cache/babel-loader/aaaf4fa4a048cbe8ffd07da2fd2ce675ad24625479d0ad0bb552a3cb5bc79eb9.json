{"ast":null,"code":"// utils.js\n// Hàm tính tổng tiền tất cả sản phẩm trong giỏ hàng\nexport const funcGetTongTien = gioHang => {\n  // Lấy ra danh sách các sản phẩm trong giỏ hàng (dạng object, chuyển thành mảng các giá trị)\n  const cacSanPham = Object.values(gioHang);\n\n  // Sử dụng phương thức reduce để tính tổng tiền\n  return cacSanPham.reduce((tong, sanPham) => tong + sanPham.GiaBanTruyen * sanPham.SoLuongTruyen, 0 // Giá trị khởi tạo cho tổng là 0\n  );\n};\n\n// Hàm tính tổng tiền sau khi đã áp dụng giảm giá\nexport const tinhTongTienSauGiamGia = (tongTien, phanTramGiam) => {\n  // Tính số tiền được giảm\n  const tienGiam = tongTien * phanTramGiam / 100;\n  // Trả về tổng tiền sau khi đã trừ đi số tiền giảm\n  return tongTien - tienGiam;\n};\n\n// Hàm tạo một ID ngẫu nhiên\nexport const taoID = () => {\n  // Lấy thời gian hiện tại (dạng số), chuyển thành chuỗi base 36 và lấy 5 ký tự cuối\n  const phan1 = Date.now().toString(36).slice(-5);\n  // Tạo một số ngẫu nhiên từ 0 đến gần 1, chuyển thành chuỗi base 36 và lấy 3 ký tự cuối\n  const phan2 = Math.random().toString(36).slice(-3);\n  // Kết hợp hai phần để tạo ID\n  return phan1 + phan2;\n};\n\n// Hàm định dạng ngày tháng để lưu vào cơ sở dữ liệu (YYYY-MM-DD)\nexport const dinhDangNgayChoDB = ngay => {\n  // Lấy năm\n  const nam = ngay.getFullYear();\n  // Lấy tháng (lưu ý: getMonth() trả về giá trị từ 0 đến 11, nên cần cộng 1),\n  // chuyển thành chuỗi và thêm '0' vào đầu nếu cần để đảm bảo có 2 chữ số\n  const thang = String(ngay.getMonth() + 1).padStart(2, '0');\n  // Lấy ngày, chuyển thành chuỗi và thêm '0' vào đầu nếu cần để đảm bảo có 2 chữ số\n  const ngayTrongThang = String(ngay.getDate()).padStart(2, '0');\n  // Trả về chuỗi ngày tháng theo định dạng YYYY-MM-DD\n  return `${nam}-${thang}-${ngayTrongThang}`;\n};","map":{"version":3,"names":["funcGetTongTien","gioHang","cacSanPham","Object","values","reduce","tong","sanPham","GiaBanTruyen","SoLuongTruyen","tinhTongTienSauGiamGia","tongTien","phanTramGiam","tienGiam","taoID","phan1","Date","now","toString","slice","phan2","Math","random","dinhDangNgayChoDB","ngay","nam","getFullYear","thang","String","getMonth","padStart","ngayTrongThang","getDate"],"sources":["D:/nxb_KimDong/fontend/user/src/component/payment/utils.js"],"sourcesContent":["// utils.js\r\n// Hàm tính tổng tiền tất cả sản phẩm trong giỏ hàng\r\nexport const funcGetTongTien = (gioHang) => {\r\n    // Lấy ra danh sách các sản phẩm trong giỏ hàng (dạng object, chuyển thành mảng các giá trị)\r\n    const cacSanPham = Object.values(gioHang);\r\n\r\n    // Sử dụng phương thức reduce để tính tổng tiền\r\n    return cacSanPham.reduce(\r\n        (tong, sanPham) => tong + sanPham.GiaBanTruyen * sanPham.SoLuongTruyen,\r\n        0 // Giá trị khởi tạo cho tổng là 0\r\n    );\r\n};\r\n\r\n// Hàm tính tổng tiền sau khi đã áp dụng giảm giá\r\nexport const tinhTongTienSauGiamGia = (tongTien, phanTramGiam) => {\r\n    // Tính số tiền được giảm\r\n    const tienGiam = (tongTien * phanTramGiam) / 100;\r\n    // Trả về tổng tiền sau khi đã trừ đi số tiền giảm\r\n    return tongTien - tienGiam;\r\n};\r\n\r\n// Hàm tạo một ID ngẫu nhiên\r\nexport const taoID = () => {\r\n    // Lấy thời gian hiện tại (dạng số), chuyển thành chuỗi base 36 và lấy 5 ký tự cuối\r\n    const phan1 = Date.now().toString(36).slice(-5);\r\n    // Tạo một số ngẫu nhiên từ 0 đến gần 1, chuyển thành chuỗi base 36 và lấy 3 ký tự cuối\r\n    const phan2 = Math.random().toString(36).slice(-3);\r\n    // Kết hợp hai phần để tạo ID\r\n    return phan1 + phan2;\r\n};\r\n\r\n// Hàm định dạng ngày tháng để lưu vào cơ sở dữ liệu (YYYY-MM-DD)\r\nexport const dinhDangNgayChoDB = (ngay) => {\r\n    // Lấy năm\r\n    const nam = ngay.getFullYear();\r\n    // Lấy tháng (lưu ý: getMonth() trả về giá trị từ 0 đến 11, nên cần cộng 1),\r\n    // chuyển thành chuỗi và thêm '0' vào đầu nếu cần để đảm bảo có 2 chữ số\r\n    const thang = String(ngay.getMonth() + 1).padStart(2, '0');\r\n    // Lấy ngày, chuyển thành chuỗi và thêm '0' vào đầu nếu cần để đảm bảo có 2 chữ số\r\n    const ngayTrongThang = String(ngay.getDate()).padStart(2, '0');\r\n    // Trả về chuỗi ngày tháng theo định dạng YYYY-MM-DD\r\n    return `${nam}-${thang}-${ngayTrongThang}`;\r\n};"],"mappings":"AAAA;AACA;AACA,OAAO,MAAMA,eAAe,GAAIC,OAAO,IAAK;EACxC;EACA,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAM,CAACH,OAAO,CAAC;;EAEzC;EACA,OAAOC,UAAU,CAACG,MAAM,CACpB,CAACC,IAAI,EAAEC,OAAO,KAAKD,IAAI,GAAGC,OAAO,CAACC,YAAY,GAAGD,OAAO,CAACE,aAAa,EACtE,CAAC,CAAC;EACN,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CAACC,QAAQ,EAAEC,YAAY,KAAK;EAC9D;EACA,MAAMC,QAAQ,GAAIF,QAAQ,GAAGC,YAAY,GAAI,GAAG;EAChD;EACA,OAAOD,QAAQ,GAAGE,QAAQ;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMC,KAAK,GAAGA,CAAA,KAAM;EACvB;EACA,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC/C;EACA,MAAMC,KAAK,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACJ,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAClD;EACA,OAAOJ,KAAK,GAAGK,KAAK;AACxB,CAAC;;AAED;AACA,OAAO,MAAMG,iBAAiB,GAAIC,IAAI,IAAK;EACvC;EACA,MAAMC,GAAG,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC;EAC9B;EACA;EACA,MAAMC,KAAK,GAAGC,MAAM,CAACJ,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC1D;EACA,MAAMC,cAAc,GAAGH,MAAM,CAACJ,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC9D;EACA,OAAO,GAAGL,GAAG,IAAIE,KAAK,IAAII,cAAc,EAAE;AAC9C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}